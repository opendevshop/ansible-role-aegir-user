---

  - name: Include global variables.
    include_vars: "vars.yml"

  # Include variables and define needed variables.
  - name: Include OS-specific variables.
    include_vars: "{{ ansible_os_family }}.yml"

  - name: Include Ubuntu 14 variables.
    include_vars: "vars.Ubuntu14.yml"
    when: ansible_distribution == 'Ubuntu' and ansible_distribution_major_version == '14'

  - name: Include Ubuntu 16 variables.
    include_vars: "vars.Ubuntu16.yml"
    when: ansible_distribution == 'Ubuntu' and ansible_distribution_major_version == '16'

  - name: Ensure openssh-client is available (including ssh-keygen tool)
    when: ansible_os_family == 'Debian'
    apt:
        update_cache: yes
        cache_valid_time: 600
        name: 'openssh-client'
        state: present

  - name: Ensure openssh-client is available (including ssh-keygen tool)
    when: ansible_os_family == 'RedHapt'
    yum:
        name: 'openssh'
        state: present

  - name: Populate service facts
    service_facts:

  - name: Stop Hosting Queued Services before altering aegir user.
    when: item in services
    service:
      name: "{{ item }}"
      state: stopped
    with_items:
      - supervisor
      - supervisord

  - name: Stop all processes owned by Aegir user
    command: "pkill -e -c -u $(id -u {{ aegir_user_name }})"
    ignore_errors: yes

  - name: Create Aegir Group (so we can set the GID)
    group:
      name: "{{ aegir_user_name }}"
      state: present
      gid: "{{ aegir_user_gid }}"

  - name: Create Aegir user
    when: aegir_create_user == 'yes'
    user:
      name: "{{ aegir_user_name }}"
      shell: /bin/bash
      group: "{{ aegir_user_name }}"
      system: yes
      home: "{{ aegir_user_home }}"
      generate_ssh_key: yes
      uid: "{{ aegir_user_uid }}"

  - name: Ensure /var/aegir is owned by aegir user.
    file:
      state: directory
      path: "{{ aegir_user_home }}"
      group: "{{ aegir_user_name }}"
      owner: "{{ aegir_user_name }}"

  # Aegir's CentOS installation requires this.
  - name: Set appropriate permissions for Aegir's home folder.
    command: chmod -R 755 {{ aegir_user_home }}
    when: ansible_os_family == "RedHat"

  - name: Create aegir's config folder
    file:
      path: "{{ aegir_user_home }}/config"
      owner: "{{ aegir_user_name }}"
      group: "{{ aegir_user_name }}"
      state: directory
      mode: 0755

  - name: Create aegir's logs folder
    file:
      path: "{{ aegir_logs_path }}"
      owner: "{{ aegir_user_name }}"
      group: "{{ aegir_user_name }}"
      state: directory
      mode: 0755

  - name: Create aegir's authorized keys file
    copy:
      dest: "{{ aegir_user_home }}/.ssh/authorized_keys"
      owner: "{{ aegir_user_name }}"
      group: "{{ aegir_user_name }}"
      content: "{{ aegir_user_authorized_keys }}"
      mode: 0644


  # We can't copy from the devmaster distro that gets created on the server because it isn't there yet.
  - name: Install fix-drupal-*-ownership scripts.
    with_items:
      - "fix-drupal-site-ownership"
      - "fix-drupal-platform-ownership"
    get_url:
      url: "https://cgit.drupalcode.org/hosting_tasks_extra/plain/fix_ownership/scripts/{{ item }}.sh?id={{ aegir_hosting_version }}"
      dest: "{{ local_bin_path }}/{{ item }}.sh"
      mode: 0755
      force: yes

  - name: Install fix-drupal-*-permissions scripts.
    with_items:
      - "fix-drupal-site-permissions"
      - "fix-drupal-platform-permissions"
    get_url:
      url: "https://cgit.drupalcode.org/hosting_tasks_extra/plain/fix_permissions/scripts/{{ item }}.sh?id={{ aegir_hosting_version }}"
      dest: "{{ local_bin_path }}/{{ item }}.sh"
      mode: 0755
      force: yes

  - name: Allow aegir user to run fix-* scripts
    with_items:
      - 'fix-drupal-site-ownership'
      - 'fix-drupal-site-permissions'
      - 'fix-drupal-platform-ownership'
      - 'fix-drupal-platform-permissions'
    lineinfile:
      dest: '{{ sudoers_file_path }}'
      line: '{{ aegir_user_name }} ALL=NOPASSWD: {{ local_bin_path }}/{{ item }}.sh'
      state: present
      validate: 'visudo -cf %s'
      create: yes

  - name: Install remi repo.
    when: ansible_os_family == 'RedHat'
    yum:
      name: "{{ remi_repo_url }}"
      state: present

  - name: Import remi GPG key.
    when: ansible_os_family == 'RedHat'
    rpm_key:
      key: "{{ remi_repo_gpg_key_url }}"
      state: present
